#       sim[x,y] <- FUN(first_i[x,], first_i[y,])
#   }
# }
sim
}
save_network <- function(x, name, min) {
png(paste("plots/",name, ".png",sep=""), width=2000, height=1200)
Q <- qgraph(x, layout='spring', vsize=5, minimum=min)
title(name, line=-1, cex.main=5, ylab=)
dev.off()
}
create_plots <- function(dataset_name, cells, counts) {
sim_mi <- build_sim_matrix(cells=cells, counts=counts, metric=mutinformation)
sim_corr <- build_sim_matrix(cells=cells, counts=counts, metric=function(x,y) abs(cor(x,y)))
save_network(x=sim_mi, name=paste(dataset_name, "mutual information"), min=2)
save_network(x=sim_corr, name=paste(dataset_name, "correlation"), min=.2)
}
for (pt in 3:4) {
pt_cells <- metadata.filt[metadata.filt$PatientNumber.MS==pt & metadata.filt$cell %in% colnames(top_counts),]$cell
create_plots(paste("Patient", pt), cells=pt_cells, counts=top_counts)
}
comb_cells <- metadata.filt[metadata.filt$PatientNumber.MS %in% c(3:4) & metadata.filt$cell %in% colnames(top_counts),]$cell
create_plots("Patients 3 and 4 combined", cells=comb_cells, counts=top_counts)
#heat map for cell-by-cell
#impute if doesn't work
#imputing doesn't work
#nonzero for cells but not for genes
top_genes <- head(VariableFeatures(lung), 20) #list of top x genes
counts <- GetAssayData(object=lung,slot="counts")[top_genes,]
build_sim_matrix <- function(cells, counts, num_PCs=20, metric) {
genes <- rownames(counts)
FUN <- match.fun(metric)
pca <- counts[,cells] %>% prcomp
pca$x <- round(pca$x, 0)#discretize
first_i <- pca$x[,1:num_PCs]
#builds similarity matrix via metric
sim <- matrix(nrow=length(genes), ncol=length(genes), dimnames = list(genes, genes))
print(sim[genes[2], genes[2]])
sim[cbind(genes, genes)] <- 0 #set diag to 0
# for (x in genes) {
#   sim[x, x] <- 0
#   for (y in genes[genes != x]) {
#       sim[x,y] <- FUN(first_i[x,], first_i[y,])
#   }
# }
sim
}
save_network <- function(x, name, min) {
png(paste("plots/",name, ".png",sep=""), width=2000, height=1200)
Q <- qgraph(x, layout='spring', vsize=5, minimum=min)
title(name, line=-1, cex.main=5, ylab=)
dev.off()
}
create_plots <- function(dataset_name, cells, counts) {
sim_mi <- build_sim_matrix(cells=cells, counts=counts, metric=mutinformation)
sim_corr <- build_sim_matrix(cells=cells, counts=counts, metric=function(x,y) abs(cor(x,y)))
save_network(x=sim_mi, name=paste(dataset_name, "mutual information"), min=2)
save_network(x=sim_corr, name=paste(dataset_name, "correlation"), min=.2)
}
for (pt in 3:4) {
pt_cells <- metadata.filt[metadata.filt$PatientNumber.MS==pt & metadata.filt$cell %in% colnames(top_counts),]$cell
create_plots(paste("Patient", pt), cells=pt_cells, counts=top_counts)
}
comb_cells <- metadata.filt[metadata.filt$PatientNumber.MS %in% c(3:4) & metadata.filt$cell %in% colnames(top_counts),]$cell
create_plots("Patients 3 and 4 combined", cells=comb_cells, counts=top_counts)
?expand.grid
expand.grid(c("a", "b", "c"), c("d", "e", "f"))
as.vector(expand.grid(c("a", "b", "c"), c("d", "e", "f")))
list(c("a", "b", "c"), c("d", "e", "f"))
as.list(outer(c("a", "b", "c"), c("d", "e", "f"), FUN = paste))
?which
?rowname
tuple_outer(c("a", "b"), c("c", "d"))
sim[cbind(genes, genes)] <- 0 #set diag to 0
#heat map for cell-by-cell
#impute if doesn't work
#imputing doesn't work
#nonzero for cells but not for genes
top_genes <- head(VariableFeatures(lung), 20) #list of top x genes
counts <- GetAssayData(object=lung,slot="counts")[top_genes,]
build_sim_matrix <- function(cells, counts, num_PCs=20, metric) {
genes <- rownames(counts)
FUN <- match.fun(metric)
pca <- counts[,cells] %>% prcomp
pca$x <- round(pca$x, 0)#discretize
first_i <- pca$x[,1:num_PCs]
#builds similarity matrix via metric
sim <- matrix(nrow=length(genes), ncol=length(genes), dimnames = list(genes, genes))
for (x in genes) {
for (y in genes) {
sim[x,y] <- FUN(first_i[x,], first_i[y,])
}
}
sim[cbind(genes, genes)] <- 0 #set diag to 0
sim
}
save_network <- function(x, name, min) {
png(paste("plots/",name, ".png",sep=""), width=2000, height=1200)
Q <- qgraph(x, layout='spring', vsize=5, minimum=min)
title(name, line=-1, cex.main=5, ylab=)
dev.off()
}
create_plots <- function(dataset_name, cells, counts) {
sim_mi <- build_sim_matrix(cells=cells, counts=counts, metric=mutinformation)
sim_corr <- build_sim_matrix(cells=cells, counts=counts, metric=function(x,y) abs(cor(x,y)))
save_network(x=sim_mi, name=paste(dataset_name, "mutual information"), min=2)
save_network(x=sim_corr, name=paste(dataset_name, "correlation"), min=.2)
}
for (pt in 3:4) {
pt_cells <- metadata.filt[metadata.filt$PatientNumber.MS==pt & metadata.filt$cell %in% colnames(top_counts),]$cell
create_plots(paste("Patient", pt), cells=pt_cells, counts=top_counts)
}
comb_cells <- metadata.filt[metadata.filt$PatientNumber.MS %in% c(3:4) & metadata.filt$cell %in% colnames(top_counts),]$cell
create_plots("Patients 3 and 4 combined", cells=comb_cells, counts=top_counts)
comb_cells <- metadata.filt[metadata.filt$PatientNumber.MS %in% c(3:4) &
metadata.filt$cell %in% genes,]$cell
comb_cells <- metadata.filt[metadata.filt$PatientNumber.MS %in% c(3:4) &
metadata.filt$cell %in% top_genes,]$cell
#heat map for cell-by-cell
#impute if doesn't work
#imputing doesn't work
#nonzero for cells but not for genes
top_genes <- head(VariableFeatures(lung), 20) #list of top x genes
counts <- GetAssayData(object=lung,slot="counts")[top_genes,]
build_sim_matrix <- function(cells, counts, num_PCs=20, metric) {
genes <- rownames(counts)
FUN <- match.fun(metric)
pca <- counts[,cells] %>% prcomp #reduce dimensionality
pca$x <- round(pca$x, 0) #discretize
first_i <- pca$x[,1:num_PCs]
#builds similarity matrix via metric
sim <- matrix(nrow=length(genes), ncol=length(genes), dimnames = list(genes, genes))
for (x in genes) {
for (y in genes) {
sim[x,y] <- FUN(first_i[x,], first_i[y,])
}
}
sim[cbind(genes, genes)] <- 0 #set diag to 0 to prevent self loops
sim #return sim
}
save_network <- function(x, name, min) {
png(paste("plots/",name, ".png",sep=""), width=2000, height=1200)
Q <- qgraph(x, layout='spring', vsize=5, minimum=min)
title(name, line=-1, cex.main=5, ylab=)
dev.off()
}
#create plots for both MI and corr
create_plots <- function(dataset_name, cells, counts) {
sim_mi <- build_sim_matrix(cells=cells, counts=counts, metric=mutinformation)
sim_corr <- build_sim_matrix(cells=cells, counts=counts, metric=function(x,y) abs(cor(x,y)))
save_network(x=sim_mi, name=paste(dataset_name, "mutual information"), min=2)
save_network(x=sim_corr, name=paste(dataset_name, "correlation"), min=.2)
}
for (pt in 3:4) {
pt_cells <- metadata.filt[metadata.filt$PatientNumber.MS==pt & metadata.filt$cell %in% colnames(top_counts),]$cell
create_plots(paste("Patient", pt), cells=pt_cells, counts=top_counts)
}
comb_cells <- metadata.filt[metadata.filt$PatientNumber.MS %in% c(3:4) &
metadata.filt$cell %in% top_genes,]$cell
create_plots("Patients 3 and 4 combined", cells=comb_cells, counts=top_counts)
#heat map for cell-by-cell
#impute if doesn't work
#imputing doesn't work
#nonzero for cells but not for genes
top_genes <- head(VariableFeatures(lung), 20) #list of top x genes
counts <- GetAssayData(object=lung,slot="counts")[top_genes,]
cells <- colnames(cells)
#heat map for cell-by-cell
#impute if doesn't work
#imputing doesn't work
#nonzero for cells but not for genes
top_genes <- head(VariableFeatures(lung), 20) #list of top x genes
counts <- GetAssayData(object=lung,slot="counts")[top_genes,]
cells <- colnames(counts)
build_sim_matrix <- function(cells, counts, num_PCs=20, metric) {
genes <- rownames(counts)
FUN <- match.fun(metric)
pca <- counts[,cells] %>% prcomp #reduce dimensionality
pca$x <- round(pca$x, 0) #discretize
first_i <- pca$x[,1:num_PCs]
#builds similarity matrix via metric
sim <- matrix(nrow=length(genes), ncol=length(genes), dimnames = list(genes, genes))
for (x in genes) {
for (y in genes) {
sim[x,y] <- FUN(first_i[x,], first_i[y,])
}
}
sim[cbind(genes, genes)] <- 0 #set diag to 0 to prevent self loops
sim #return sim
}
save_network <- function(x, name, min) {
png(paste("plots/",name, ".png",sep=""), width=2000, height=1200)
Q <- qgraph(x, layout='spring', vsize=5, minimum=min)
title(name, line=-1, cex.main=5, ylab=)
dev.off()
}
#create plots for both MI and corr
create_plots <- function(dataset_name, cells, counts) {
sim_mi <- build_sim_matrix(cells=cells, counts=counts, metric=mutinformation)
sim_corr <- build_sim_matrix(cells=cells, counts=counts, metric=function(x,y) abs(cor(x,y)))
save_network(x=sim_mi, name=paste(dataset_name, "mutual information"), min=2)
save_network(x=sim_corr, name=paste(dataset_name, "correlation"), min=.2)
}
for (pt in 3:4) {
pt_cells <- metadata.filt[metadata.filt$PatientNumber.MS==pt & metadata.filt$cell %in% cells,]$cell
create_plots(paste("Patient", pt), cells=pt_cells, counts=top_counts)
}
#heat map for cell-by-cell
#impute if doesn't work
#imputing doesn't work
#nonzero for cells but not for genes
top_genes <- head(VariableFeatures(lung), 20) #list of top x genes
counts <- GetAssayData(object=lung,slot="counts")[top_genes,]
build_sim_matrix <- function(cells, counts, num_PCs=20, metric) {
genes <- rownames(counts)
FUN <- match.fun(metric)
pca <- counts[,cells] %>% prcomp #reduce dimensionality
pca$x <- round(pca$x, 0) #discretize
first_i <- pca$x[,1:num_PCs]
#builds similarity matrix via metric
sim <- matrix(nrow=length(genes), ncol=length(genes), dimnames = list(genes, genes))
for (x in genes) {
for (y in genes) {
sim[x,y] <- FUN(first_i[x,], first_i[y,])
}
}
sim[cbind(genes, genes)] <- 0 #set diag to 0 to prevent self loops
sim #return sim
}
save_network <- function(x, name, min) {
png(paste("plots/",name, ".png",sep=""), width=2000, height=1200)
Q <- qgraph(x, layout='spring', vsize=5, minimum=min)
title(name, line=-1, cex.main=5, ylab=)
dev.off()
}
#create plots for both MI and corr
create_plots <- function(dataset_name, cells, counts) {
sim_mi <- build_sim_matrix(cells=cells, counts=counts, metric=mutinformation)
sim_corr <- build_sim_matrix(cells=cells, counts=counts, metric=function(x,y) abs(cor(x,y)))
save_network(x=sim_mi, name=paste(dataset_name, "mutual information"), min=2)
save_network(x=sim_corr, name=paste(dataset_name, "correlation"), min=.2)
}
for (pt in 3:4) {
pt_cells <- metadata.filt[metadata.filt$PatientNumber.MS==pt & metadata.filt$cell %in% colnames(top_counts),]$cell
create_plots(paste("Patient", pt), cells=pt_cells, counts=top_counts)
}
comb_cells <- metadata.filt[metadata.filt$PatientNumber.MS %in% c(3:4) &
metadata.filt$cell %in% colnames(top_counts),]$cell
create_plots("Patients 3 and 4 combined", cells=comb_cells, counts=top_counts)
knitr::opts_chunk$set(
cache = TRUE,
cache.lazy = FALSE,
tidy = TRUE
)
library(openxlsx)
library(Seurat)
library(Matrix)
library(dplyr)
library(data.table)
library(aricode) #NMI
library(tidygraph)
library(ggplot2)
library(ggraph)
library(oaqc)
library(wesanderson) #colors
load("./adenoallraw.RData")
type <- "tumor"
lung <- CreateSeuratObject(adeno.all$TUMOR, min.cells = 3, min.features = 0, project = "nsclc")
lung.all <- CreateSeuratObject(adeno.all, min.cells = 3, min.features = 0, project = "nsclc")
View(adeno.all)
View(adeno.all)
View(adeno.all)
knitr::opts_chunk$set(
cache = TRUE,
cache.lazy = FALSE,
tidy = TRUE
)
library(openxlsx)
library(Seurat)
library(Matrix)
library(dplyr)
library(data.table)
library(aricode) #NMI
library(tidygraph)
library(ggplot2)
library(ggraph)
library(oaqc)
library(wesanderson) #colors
load("./adenoallraw.RData")
type <- "tumor"
lung <- CreateSeuratObject(adeno.all$TUMOR, min.cells = 3, min.features = 0, project = "nsclc")
metadata <- data.table(read.xlsx("./MetaData.xlsx", 1))
strsplit.ind2 <- seq(from=2, by=2, length.out = nrow(metadata))
metadata.filt <- metadata %>%
mutate(piece = unlist(strsplit(Patient_piece, split="-"))[strsplit.ind2]) %>%
filter(CellType == type)
lung <- AddMetaData(object=lung, metadata=metadata.filt)
View(lung)
lung <- NormalizeData(object = lung, normalization.method = "LogNormalize", scale.factor = 1e4)
all.genes <- rownames(x = lung)
lung <- ScaleData(object = lung, features = all.genes)
lung <- FindVariableFeatures(lung)
genes <- head(VariableFeatures(lung), 50)
counts <- GetAssayData(object=lung,slot="counts")[genes, ]
View(counts)
View(metadata.filt)
View(lung)
lung@meta.data[["CellFromTumor"]]
View(metadata.filt)
lung <- AddMetaData(object=lung, metadata=metadata.filt$CellFromTumor, col.name='from.tumor')
metadata.filt[CellFromTumor]
metadata.filt["CellFromTumor"]
NvimR.chunk()
lung <- ScaleData(object = lung, features = all.genes)
NvimR.chunk()
NvimR.chunk()
?node_rank
NvimR.chunk()
NvimR.chunk()
NvimR.chunk()
NvimR.chunk()
NvimR.chunk()
?group_nodes
?group_graph
NvimR.chunk()
NvimR.chunk()
NvimR.chunk()
?exp
NvimR.chunk()
NvimR.chunk()
NvimR.chunk()
NvimR.chunk()
?group_graph
NvimR.chunk()
NvimR.chunk()
NvimR.chunk()
source("mi_scrna.R")
NvimR.chunk()
?node_rank
source("mi_scrna.R")
NvimR.chunk()
NvimR.chunk()
NvimR.chunk()
NvimR.selection()
comb.cells
comb.cells[2]
counts[comb.cells[2]]
source("mi_scrna.R")
NvimR.selection()
NvimR.chunk()
NvimR.chunk()
source("mi_scrna.R")
NvimR.selection()
source("mi_scrna.R")
NvimR.selection()
source("mi_scrna.R")
print(most_central(mi.graph, 10))
source("mi_scrna.R")
print(most_central(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_central(mi.graph, 10, counts))
print(most_central(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_central(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_central(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_central(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_central(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_hclust(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_hclust(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_hclust(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_hclust(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_central(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_central(mi.graph, 10, counts))
?update
source("mi_scrna.R")
print(most_hclust(mi.graph, 10, counts))
print(most_hclust(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_hclust(mi.graph, 10, counts))
print(most_hclust(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_hclust(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_hclust(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_hclust(mi.graph, 10, counts))
library(tibble)
print(most_hclust(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_hclust(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_hclust(mi.graph, 10, counts))
print(most_hclust(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_hclust(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_hclust(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_hclust(mi.graph, 10, counts))
print(most_hclust(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_hclust(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_hclust(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_hclust(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_hclust(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_hclust(mi.graph, 10, counts))
print(most_hclust(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_hclust(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_hclust(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_hclust(mi.graph, 10, counts))
print(most_hclust(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_hclust(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_hclust(mi.graph, 10, counts))
source("mi_scrna.R")
print(most_hclust(mi.graph, 10, counts))
NvimR.chunk()
source("mi_scrna.R")
NvimR.chunk()
d <- as.dist(read.table(textConnection("
0   662 877 255 412 996
662 0   295 468 268 400
877 295 0   754 564 138
255 468 754 0   219 869
412 268 564 219 0   669
996 400 138 869 669 0")))
d
hc <- hclust(d, method="single")
hc$order
mi.graph
mi.graph$weights
mi.graph$E
mi.graph.e()
mi.graph.E
mi.graph.weights
source("mi_scrna.R")
NvimR.chunk()
library("seriation")
install.packages("seriation")
library("seriation")
NvimR.chunk()
source("mi_scrna.R")
NvimR.chunk()
source("mi_scrna.R")
NvimR.chunk()
source("mi_scrna.R")
NvimR.chunk()
NvimR.chunk()
source("mi_scrna.R")
NvimR.chunk()
NvimR.chunk()
NvimR.chunk()
mi.graph
pull(mi.graph, weight)
pull(mi.graph, "weight")
mi.graph.E()
activate(mi.graph, edges)
activate(mi.graph, edges) %>% pull(weight)
range(activate(mi.graph, edges) %>% pull(weight))
source("mi_scrna.R")
NvimR.chunk()
range(activate(mi.graph, edges) %>% pull(weight))
NvimR.chunk()
NvimR.chunk()
install.packages("ggdendo")
install.packages("ggdendro")
source("mi_scrna.R")
NvimR.chunk()
source("mi_scrna.R")
NvimR.chunk()
install.packages("readxl")
NvimR.chunk()
NvimR.chunk()
lung
metadata
metadata.filt
metadata.filt.rownames
view(metadata.filt)
variables(metadata.filt)
colnames(metadata.filt)
pull(metadata.filt.rownames, "piece")
pull(metadata.filt, "piece")
clear
NvimR.chunk()
NvimR.chunk()
NvimR.chunk()
install.packages("ggplot2")
install.packages("ggraph")
rm(list = ls())
install.packages("Rcpp", type="source")
install.packages("dplyr", type="source")
q()
q(0
)
q()
